#nullable enable
using PlasticMetal.MobileSuit.ObjectModel.Attributes;
using PlasticMetal.MobileSuit.ObjectModel.Interfaces;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace PlasticMetal.MobileSuit.ObjectModel.Members
{
    /// <summary>
    /// Whether a member is SuitIgnore or not.
    /// </summary>
    public enum MemberAccess
    {
        /// <summary>
        /// With SuitIgnore Attribute
        /// </summary>
        Hidden = 0,
        /// <summary>
        /// Without SuitIgnore Attribute
        /// </summary>
        VisibleToUser = 1
    }
    /// <summary>
    /// Type of a member
    /// </summary>
    public enum MemberType
    {
        /// <summary>
        /// A Method with customized information
        /// </summary>
        MethodWithInfo = 0,
        /// <summary>
        /// A Method without customized information
        /// </summary>
        MethodWithoutInfo = -1,
        /// <summary>
        /// A Field/Property with customized information
        /// </summary>
        FieldWithInfo = 1,
        /// <summary>
        /// A Field/Property without customized information
        /// </summary>
        FieldWithoutInfo = -2
    }
    /// <summary>
    /// A SuitObject's member.
    /// </summary>
    public abstract class ObjectMember : IExecutable
    {
        /// <summary>
        /// Initialize a ObjectMember with SuitObject's instance and the member's information.
        /// </summary>
        /// <param name="instance"></param>
        /// <param name="member"></param>
        protected ObjectMember(object? instance, MemberInfo member)
        {
            Access = member.GetCustomAttribute<SuitIgnoreAttribute>() is null
                ? MemberAccess.VisibleToUser
                : MemberAccess.Hidden;
            AbsoluteName = member.Name;
            Aliases = (
                from a in member.GetCustomAttributes<SuitAliasAttribute>(true)
                select a.Text).ToArray();
            Instance = instance;
        }
        /// <summary>
        /// Whether this member is SuitIgnore or not.
        /// </summary>
        public MemberAccess Access { get; }
        /// <summary>
        /// Type of the member
        /// </summary>
        public MemberType Type { get; protected set; }
            = MemberType.MethodWithInfo;
        /// <summary>
        /// Information of this member, customized or generated by Mobile Suit.
        /// </summary>
        public string Information { get; protected set; }
            = "";
        /// <summary>
        /// Absolute name, and aliases.
        /// </summary>
        public IEnumerable<string> FriendlyNames => new[] { AbsoluteName }.Union(Aliases);
        /// <summary>
        /// Aliases of this member.
        /// </summary>
        public string[] Aliases { get; protected set; }
        /// <summary>
        /// Absolute name of this member.
        /// </summary>
        public string AbsoluteName { get; protected set; }
        /// <summary>
        /// Instance which contains this member.
        /// </summary>
        public object? Instance { get; set; }

        /// <summary>
        /// Execute this object.
        /// </summary>
        /// <param name="args">The arguments for execution.</param>
        /// <param name="returnValue"></param>
        /// <returns>TraceBack result of this object.</returns>
        public abstract TraceBack Execute(string[] args, out object? returnValue);
    }
}
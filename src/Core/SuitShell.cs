#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace HitRefresh.MobileSuit.Core;

/// <summary>
///     A SuitObject's member.
/// </summary>
public abstract class SuitShell : ISuitShell
{
    private readonly InstanceFactory _instanceFactory;

    /// <summary>
    ///     Initialize a ObjectMember with SuitObject's instance and the member's information.
    /// </summary>
    /// <param name="member"></param>
    /// <param name="factory"></param>
    /// <param name="absoluteName"></param>
    protected SuitShell(MemberInfo member, InstanceFactory factory, string? absoluteName = null)
    {
        AbsoluteName = absoluteName ?? member.Name;
        FriendlyNames.Add(AbsoluteName);
        foreach (var alias in member != null
                     ? (
                         from a in member.GetCustomAttributes<SuitAliasAttribute>(true)
                         select a.Text).ToArray()
                     : Array.Empty<string>())
            FriendlyNames.Add(alias);

        _instanceFactory = factory;
    }

    /// <summary>
    ///     Information of this member, customized or generated by Mobile Suit.
    /// </summary>
    public string Information { get; protected set; }
        = "";

    /// <summary>
    ///     Absolute name, and aliases.
    /// </summary>
    public HashSet<string> FriendlyNames { get; } = new();

    /// <summary>
    ///     Aliases of this member.
    /// </summary>
    public IEnumerable<string> Aliases => FriendlyNames.Where(n => n != AbsoluteName);

    /// <summary>
    ///     Absolute name of this member.
    /// </summary>
    public string AbsoluteName { get; protected set; }

    /// <summary>
    ///     MemberCount of shell. Used to sort.
    /// </summary>
    public abstract int MemberCount { get; }

    /// <summary>
    ///     Type of the member
    /// </summary>
    public MemberType Type { get; protected set; }
        = MemberType.MethodWithInfo;

    /// <inheritdoc />
    public abstract Task Execute(SuitContext context);

    /// <inheritdoc />
    public abstract bool MayExecute(IReadOnlyList<string> request);

    /// <summary>
    ///     Instance which contains this member.
    /// </summary>
    public object? GetInstance(SuitContext context)
    {
        return _instanceFactory(context);
    }
}